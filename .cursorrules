# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2
Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
py310/bin/python ./tools/llm_api.py --prompt "What is the capital of France?"
```

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
py310/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the improved search engine implementation for better reliability:
```
py310/bin/python ./tools/search_engine_improved.py "your search keywords" --max-results 10 --delay 7 --debug
```

This will output the search results in the following format:
```
=== Result 1 ===
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

Key features of the improved search engine:
- Robust error handling with retries
- Rate limit handling with exponential backoff
- Debug mode for troubleshooting
- Multiple parsing strategies for different layouts
- Detailed logging

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./py310.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Use LLM to perform flexible text understanding tasks. First test on a few files. After success, make it parallel.

## Cursor learned

- For website image paths, always use the correct relative path (e.g., 'images/filename.png') and ensure the images directory exists
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- On Windows systems, use backslashes for paths (e.g., 'py310\Scripts\python.exe') and activate virtual environment using '.\py310\Scripts\activate'
- When scraping search results, use multiple selector patterns and proper headers to handle different layouts and avoid rate limits
- Implement exponential backoff for retry mechanisms when dealing with rate-limited APIs

## PowerShell Syntax
- PowerShell does not use `&&` for command chaining like bash. Instead, use semicolon `;` to separate commands:
  ```powershell
  # Wrong:
  git add file && git commit && git push

  # Correct:
  git add file; git commit; git push
  ```

## Environment
- You have a python venv in ./py310
- Include info useful for debugging in the program output
- Read the file before you try to edit it
- Use LLM to perform flexible text understanding tasks. First test on a few files. After success, make it parallel
- On Windows systems, use backslashes for paths (e.g., 'py310\Scripts\python.exe') and activate virtual environment using '.\py310\Scripts\activate'
- When scraping search results, use multiple selector patterns and proper headers to handle different layouts and avoid rate limits
- Implement exponential backoff for retry mechanisms when dealing with rate-limited APIs

## Data Storage
- When deploying to cloud platforms like Streamlit Cloud, avoid relying on local file storage. Instead, keep data in memory or use cloud storage solutions.
- For website image paths, always use the correct relative path (e.g., 'images/filename.png') and ensure the images directory exists

# Scratchpad

Task: Improve search engine implementation
[X] Analyze issues with original implementation
[X] Create improved version with better error handling
[X] Add debug capabilities and logging
[X] Move improved implementation to tools folder
[X] Update documentation in .cursorrules

Current Progress:
- Improved search engine implementation completed
- Added to tools folder for better organization
- Updated documentation with new features and usage
- Added new lessons learned about web scraping and rate limiting

Next Steps:
1. Test the improved implementation with various queries
2. Monitor and adjust retry parameters if needed
3. Consider adding more parsing patterns if new layouts are discovered
